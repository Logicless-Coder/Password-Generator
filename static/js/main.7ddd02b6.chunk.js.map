{"version":3,"sources":["PasswordGen.js","App.js","serviceWorker.js","index.js"],"names":["PasswordGen","props","generatePassword","allowedChars","state","lower","i","push","String","fromCharCode","upper","digits","symbols","console","log","generatedPassword","l","length","Math","floor","random","setState","pwd","handleChange","event","labl","target","name","copySuccess","className","type","placeholder","value","this","text","onCopy","axis","xstep","xmin","xmax","x","onChange","parseInt","styles","track","backgroundColor","width","height","active","onClick","checked","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ddd02b6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Slider from \"react-input-slider\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport \"./PasswordGen.css\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n\r\nclass PasswordGen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pwd: \"\",\r\n      length: 12,\r\n      lower: true,\r\n      upper: true,\r\n      digits: true,\r\n      symbols: true,\r\n      copySuccess: false,\r\n    };\r\n  }\r\n\r\n  generatePassword = () => {\r\n    var allowedChars = [];\r\n    if (this.state.lower) {\r\n      for (let i = 97; i < 123; i++) {\r\n        allowedChars.push(String.fromCharCode(i));\r\n      }\r\n    }\r\n    if (this.state.upper) {\r\n      for (let i = 65; i < 91; i++) {\r\n        allowedChars.push(String.fromCharCode(i));\r\n      }\r\n    }\r\n    if (this.state.digits) {\r\n      for (let i = 48; i < 58; i++) {\r\n        allowedChars.push(String.fromCharCode(i));\r\n      }\r\n    }\r\n    if (this.state.symbols) {\r\n      for (let i = 33; i < 48; i++) {\r\n        allowedChars.push(String.fromCharCode(i));\r\n      }\r\n      for (let i = 58; i < 65; i++) {\r\n        allowedChars.push(String.fromCharCode(i));\r\n      }\r\n    }\r\n\r\n    console.log(allowedChars);\r\n    var generatedPassword = \"\";\r\n    for (let l = 0; l < this.state.length; l++) {\r\n      var r = Math.floor(Math.random() * allowedChars.length);\r\n      generatedPassword += allowedChars[r];\r\n    }\r\n\r\n    console.log(generatedPassword);\r\n    this.setState({\r\n      pwd: generatedPassword,\r\n    });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    var labl = event.target.name;\r\n    if (labl === \"lower\") {\r\n      this.setState({\r\n        lower: !this.state.lower,\r\n      });\r\n    }\r\n    if (labl === \"upper\") {\r\n      this.setState({\r\n        upper: !this.state.upper,\r\n      });\r\n    }\r\n    if (labl === \"digits\") {\r\n      this.setState({\r\n        digits: !this.state.digits,\r\n      });\r\n    }\r\n    if (labl === \"symbols\") {\r\n      this.setState({\r\n        symbols: !this.state.symbols,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <h1 className=\"header\">Generate a strong Password</h1>\r\n        <div className=\"pwd-gen\">\r\n          <div className=\"pwd-display\">\r\n            <input\r\n              className=\"pwd-field\"\r\n              type=\"text\"\r\n              placeholder=\"Generated password will be shown here\"\r\n              value={this.state.pwd}\r\n            />\r\n            <CopyToClipboard\r\n              text={this.state.pwd}\r\n              className=\"copy-button\"\r\n              onCopy={() => this.setState({ copySuccess: true })}\r\n            >\r\n              <button>\r\n                <FaRegCopy />\r\n              </button>\r\n            </CopyToClipboard>\r\n            <div className=\"copy-message\">\r\n              {this.state.copySuccess ? <span>Copied.</span> : null}\r\n            </div>\r\n          </div>\r\n          <div className=\"slider-box\">\r\n            <label className=\"length-label\">{this.state.length}</label>\r\n            <Slider\r\n              className=\"slider\"\r\n              axis=\"x\"\r\n              xstep={1}\r\n              xmin={1}\r\n              xmax={20}\r\n              x={this.state.length}\r\n              onChange={({ x }) => this.setState({ length: parseInt(x) })}\r\n              styles={{\r\n                track: {\r\n                  backgroundColor: \"rgba(163, 203, 56, 0.5)\",\r\n                  width: 200,\r\n                  height: 20,\r\n                },\r\n                active: {\r\n                  backgroundColor: \"rgba(0, 148, 50,1.0)\",\r\n                },\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"conditions\">\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox\"\r\n                name=\"lower\"\r\n                onClick={this.handleChange}\r\n                checked={this.state.lower}\r\n              />\r\n              a - z\r\n            </label>\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox\"\r\n                name=\"upper\"\r\n                onClick={this.handleChange}\r\n                checked={this.state.upper}\r\n              />\r\n              A - Z\r\n            </label>\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox\"\r\n                name=\"digits\"\r\n                onClick={this.handleChange}\r\n                checked={this.state.digits}\r\n              />\r\n              0 - 9\r\n            </label>\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox\"\r\n                name=\"symbols\"\r\n                onClick={this.handleChange}\r\n                checked={this.state.symbols}\r\n              />\r\n              Symbols\r\n            </label>\r\n          </div>\r\n          <div className=\"button-box\">\r\n            <button onClick={this.generatePassword} className=\"generate-button\">\r\n              Generate\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PasswordGen;\r\n","import React from \"react\";\n\nimport PasswordGen from \"./PasswordGen\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PasswordGen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}